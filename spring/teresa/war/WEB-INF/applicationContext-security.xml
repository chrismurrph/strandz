<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.1.xsd">
    
    <!--
      Whenever change here also change the client. See AdminEvent.
      -->
    <http auto-config='true'>
      <http-basic />
      <intercept-url pattern="/userDetails" access="ROLE_USER" />
      <intercept-url pattern="/rosterService" access="ROLE_USER" />
      <intercept-url pattern="/uploadRosterService" access="ROLE_USER" />
    </http>

    <!-- Detailed way, see spring-http-config.xml
    -->
    <authentication-manager>
      <authentication-provider ref="myDaoAuthenticationProvider"/>    
    </authentication-manager>        

    <!-- First reason didn't work is we've called our user table USER rather than USERS
    <authentication-manager>
      <authentication-provider>
	<jdbc-user-service data-source-ref="dataSource"/>
      </authentication-provider>
    </authentication-manager>        
    -->

    <!-- We will need the software to specify who the users are and what their roles are,
         hence this stuff needs to be in a DB
    <authentication-manager>
      <authentication-provider>
        <user-service>
          <user name="Chris" password="Murphy" authorities="ROLE_USER, ROLE_ADMIN" />
          <user name="Brent" password="Percy" authorities="ROLE_USER" />
        </user-service>
      </authentication-provider>
    </authentication-manager>        
    -->
    
</beans:beans>